#!/bin/bash

# =============================================================================
# Setup Automated PostgreSQL Backup Script
# Configures cron jobs for automated database backups with rotation
# =============================================================================

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
COMPOSE_DIR="${SCRIPT_DIR}/.."
BACKUP_SCRIPT="${SCRIPT_DIR}/backup-sql.sh"
CRON_FILE="/tmp/gobackend_backup_cron"
LOG_DIR="${SCRIPT_DIR}/../logs"
BACKUP_LOG="${LOG_DIR}/backup.log"

# Default schedule configurations
DAILY_SCHEDULE="0 2 * * *"           # 2 AM daily
WEEKLY_SCHEDULE="0 3 * * 0"          # 3 AM every Sunday
MONTHLY_SCHEDULE="0 4 1 * *"         # 4 AM first day of month

# Helper Functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_banner() {
    echo -e "${BLUE}"
    echo "================================"
    echo "  Setup Automated Backup"
    echo "================================"
    echo -e "${NC}"
}

# Check prerequisites
check_prerequisites() {
    log_info "Checking prerequisites..."

    # Check if cron is available
    if ! command -v crontab &> /dev/null; then
        log_error "crontab is required but not installed"
        log_info "Install cron with: sudo apt-get install cron"
        exit 1
    fi

    # Check if backup script exists
    if [[ ! -f "$BACKUP_SCRIPT" ]]; then
        log_error "Backup script not found: $BACKUP_SCRIPT"
        exit 1
    fi

    # Make backup script executable
    chmod +x "$BACKUP_SCRIPT"

    # Create log directory
    mkdir -p "$LOG_DIR"

    log_success "Prerequisites check passed"
}

# Create backup wrapper script
create_backup_wrapper() {
    local schedule_type="$1"
    local retention_days="$2"

    local wrapper_script="${SCRIPT_DIR}/backup-${schedule_type}.sh"

    log_info "Creating backup wrapper for ${schedule_type} backups..."

    cat > "$wrapper_script" << EOF
#!/bin/bash

# Automated ${schedule_type} backup wrapper
# Generated by setup-automated-backup.sh

set -e

# Configuration
SCRIPT_DIR="\$(cd "\$(dirname "\${BASH_SOURCE[0]}")" && pwd)"
BACKUP_SCRIPT="\${SCRIPT_DIR}/backup-sql.sh"
LOG_FILE="\${SCRIPT_DIR}/../logs/backup-${schedule_type}.log"
RETENTION_DAYS="${retention_days}"

# Create log directory if it doesn't exist
mkdir -p "\$(dirname "\$LOG_FILE")"

# Function to log with timestamp
log_with_timestamp() {
    echo "\$(date '+%Y-%m-%d %H:%M:%S') - \$1" | tee -a "\$LOG_FILE"
}

# Main backup function
main() {
    log_with_timestamp "Starting ${schedule_type} backup..."

    # Change to script directory
    cd "\$SCRIPT_DIR"

    # Run backup with retention
    if "\$BACKUP_SCRIPT" --retention "\$RETENTION_DAYS" >> "\$LOG_FILE" 2>&1; then
        log_with_timestamp "✅ ${schedule_type} backup completed successfully"

        # Keep only last 100 lines of log to prevent it from growing too large
        tail -n 100 "\$LOG_FILE" > "\$LOG_FILE.tmp" && mv "\$LOG_FILE.tmp" "\$LOG_FILE"
    else
        log_with_timestamp "❌ ${schedule_type} backup failed"
        exit 1
    fi
}

# Run main function
main "\$@"
EOF

    chmod +x "$wrapper_script"
    log_success "Created wrapper script: $(basename "$wrapper_script")"
}

# Setup cron jobs
setup_cron_jobs() {
    local schedule="$1"

    log_info "Setting up cron jobs for schedule: $schedule"

    # Get current crontab
    crontab -l > "$CRON_FILE" 2>/dev/null || true

    # Remove existing gobackend backup entries
    sed -i '/# gobackend-backup/d' "$CRON_FILE" 2>/dev/null || true

    case "$schedule" in
        "daily")
            create_backup_wrapper "daily" "7"
            echo "${DAILY_SCHEDULE} ${SCRIPT_DIR}/backup-daily.sh # gobackend-backup-daily" >> "$CRON_FILE"
            ;;
        "weekly")
            create_backup_wrapper "weekly" "30"
            echo "${WEEKLY_SCHEDULE} ${SCRIPT_DIR}/backup-weekly.sh # gobackend-backup-weekly" >> "$CRON_FILE"
            ;;
        "monthly")
            create_backup_wrapper "monthly" "365"
            echo "${MONTHLY_SCHEDULE} ${SCRIPT_DIR}/backup-monthly.sh # gobackend-backup-monthly" >> "$CRON_FILE"
            ;;
        "all")
            create_backup_wrapper "daily" "7"
            create_backup_wrapper "weekly" "30"
            create_backup_wrapper "monthly" "365"
            echo "${DAILY_SCHEDULE} ${SCRIPT_DIR}/backup-daily.sh # gobackend-backup-daily" >> "$CRON_FILE"
            echo "${WEEKLY_SCHEDULE} ${SCRIPT_DIR}/backup-weekly.sh # gobackend-backup-weekly" >> "$CRON_FILE"
            echo "${MONTHLY_SCHEDULE} ${SCRIPT_DIR}/backup-monthly.sh # gobackend-backup-monthly" >> "$CRON_FILE"
            ;;
        "custom")
            local custom_schedule="$2"
            local custom_retention="$3"
            create_backup_wrapper "custom" "$custom_retention"
            echo "${custom_schedule} ${SCRIPT_DIR}/backup-custom.sh # gobackend-backup-custom" >> "$CRON_FILE"
            ;;
        *)
            log_error "Unknown schedule: $schedule"
            exit 1
            ;;
    esac

    # Install new crontab
    crontab "$CRON_FILE"
    rm -f "$CRON_FILE"

    log_success "Cron jobs configured successfully"
}

# Remove cron jobs
remove_cron_jobs() {
    log_info "Removing gobackend backup cron jobs..."

    # Get current crontab
    if crontab -l > "$CRON_FILE" 2>/dev/null; then
        # Remove gobackend backup entries
        sed -i '/# gobackend-backup/d' "$CRON_FILE"

        # Install updated crontab
        crontab "$CRON_FILE"
        rm -f "$CRON_FILE"

        log_success "Backup cron jobs removed"
    else
        log_warning "No existing crontab found"
    fi

    # Remove wrapper scripts
    rm -f "${SCRIPT_DIR}/backup-daily.sh"
    rm -f "${SCRIPT_DIR}/backup-weekly.sh"
    rm -f "${SCRIPT_DIR}/backup-monthly.sh"
    rm -f "${SCRIPT_DIR}/backup-custom.sh"

    log_success "Backup wrapper scripts removed"
}

# Show current cron jobs
show_cron_jobs() {
    log_info "Current gobackend backup cron jobs:"
    echo

    if crontab -l 2>/dev/null | grep -q "gobackend-backup"; then
        crontab -l | grep "gobackend-backup" | while read -r line; do
            echo "  $line"
        done
    else
        log_warning "No gobackend backup cron jobs found"
    fi

    echo
    log_info "System cron service status:"
    if systemctl is-active --quiet cron 2>/dev/null; then
        echo "  ✅ Cron service is running"
    elif systemctl is-active --quiet crond 2>/dev/null; then
        echo "  ✅ Crond service is running"
    else
        echo "  ❌ Cron service is not running"
        log_warning "You may need to start the cron service: sudo systemctl start cron"
    fi
}

# Test backup
test_backup() {
    log_info "Running test backup..."

    cd "$SCRIPT_DIR"

    if "$BACKUP_SCRIPT" --test; then
        log_success "Test backup completed successfully"
    else
        log_error "Test backup failed"
        exit 1
    fi
}

# Create log rotation config
setup_log_rotation() {
    local logrotate_config="/etc/logrotate.d/gobackend-backup"

    log_info "Setting up log rotation..."

    # Create logrotate configuration
    sudo tee "$logrotate_config" > /dev/null << EOF
${LOG_DIR}/*.log {
    daily
    rotate 30
    compress
    delaycompress
    missingok
    notifempty
    create 644 $(whoami) $(whoami)
    postrotate
        # Send notification or perform cleanup if needed
    endscript
}
EOF

    log_success "Log rotation configured: $logrotate_config"
}

# Show usage
show_usage() {
    echo "Usage: $0 [COMMAND] [OPTIONS]"
    echo ""
    echo "Commands:"
    echo "  setup [SCHEDULE]         Setup automated backups"
    echo "  remove                   Remove all backup cron jobs"
    echo "  status                   Show current backup cron jobs"
    echo "  test                     Run a test backup"
    echo "  logs                     Show recent backup logs"
    echo ""
    echo "Schedule Options:"
    echo "  daily                    Daily backups at 2 AM (keeps 7 days)"
    echo "  weekly                   Weekly backups at 3 AM Sunday (keeps 30 days)"
    echo "  monthly                  Monthly backups at 4 AM 1st (keeps 365 days)"
    echo "  all                      Setup all schedules (daily, weekly, monthly)"
    echo "  custom 'CRON' DAYS       Custom schedule with retention"
    echo ""
    echo "Examples:"
    echo "  $0 setup daily                    # Daily backups"
    echo "  $0 setup all                      # All backup schedules"
    echo "  $0 setup custom '0 1 * * *' 14    # 1 AM daily, keep 14 days"
    echo "  $0 remove                         # Remove all backup jobs"
    echo "  $0 status                         # Show current jobs"
    echo "  $0 test                           # Test backup"
    echo "  $0 logs                           # Show logs"
}

# Show logs
show_logs() {
    local lines="${1:-50}"

    log_info "Recent backup logs (last $lines lines):"
    echo

    for log_file in "${LOG_DIR}"/backup*.log; do
        if [[ -f "$log_file" ]]; then
            echo -e "${BLUE}=== $(basename "$log_file") ===${NC}"
            tail -n "$lines" "$log_file" 2>/dev/null || echo "No logs found"
            echo
        fi
    done
}

# Main function
main() {
    local command="$1"

    case "$command" in
        "setup")
            print_banner
            check_prerequisites

            local schedule="${2:-daily}"

            if [[ "$schedule" == "custom" ]]; then
                local custom_cron="$3"
                local custom_retention="${4:-30}"

                if [[ -z "$custom_cron" ]]; then
                    log_error "Custom cron schedule is required"
                    show_usage
                    exit 1
                fi

                setup_cron_jobs "custom" "$custom_cron" "$custom_retention"
            else
                setup_cron_jobs "$schedule"
            fi

            setup_log_rotation

            echo
            log_success "🕐 Automated backup setup completed!"
            echo "  Schedule: $schedule"
            echo "  Logs: $LOG_DIR/"
            echo ""
            echo "Check status with: $0 status"
            echo "Test backup with: $0 test"
            ;;
        "remove")
            print_banner
            remove_cron_jobs
            echo
            log_success "🗑️  Automated backup removed!"
            ;;
        "status")
            print_banner
            show_cron_jobs
            ;;
        "test")
            print_banner
            check_prerequisites
            test_backup
            ;;
        "logs")
            show_logs "${2:-50}"
            ;;
        "help"|"--help"|"")
            show_usage
            ;;
        *)
            log_error "Unknown command: $command"
            show_usage
            exit 1
            ;;
    esac
}

# Run main function
main "$@"
