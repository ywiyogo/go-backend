name: gb

services:
  db:
    image: postgres:17
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 60s
      timeout: 5s
      retries: 5

  migrate:
    image: migrate/migrate
    restart: "no"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - ../../internal/db/migrations:/migrations
    command:
      [
        "-path",
        "/migrations",
        "-database",
        "postgres://${DB_USER}:${DB_PASSWORD}@db:${DB_PORT}/${DB_NAME}?sslmode=disable",
        "up",
      ]

  migrate-down:
    image: migrate/migrate
    restart: "no"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - ../../internal/db/migrations:/migrations
    command:
      [
        "-path",
        "/migrations",
        "-database",
        "postgres://${DB_USER}:${DB_PASSWORD}@db:${DB_PORT}/${DB_NAME}?sslmode=disable",
        "down",
        "1",
      ]
    profiles:
      - emergency

  backend:
    image: ${DOCKER_IMAGE}
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    # port mapping (external:internal) with default 8090:8090
    ports:
      - "${PORT:-8090}:${PORT:-8090}"

volumes:
  pgdata:
